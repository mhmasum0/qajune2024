<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java OOP Polymorphism on QA June 2024</title>
    <link>http://localhost:1313/qajune2024/lectures/java-oop-polymorphism/</link>
    <description>Recent content in Java OOP Polymorphism on QA June 2024</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="http://localhost:1313/qajune2024/lectures/java-oop-polymorphism/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Java OOP Method Overloading</title>
      <link>http://localhost:1313/qajune2024/lectures/java-oop-polymorphism/java-oop-method-overloading/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/qajune2024/lectures/java-oop-polymorphism/java-oop-method-overloading/</guid>
      <description>Java OOP Method Overloading( Changing the number of arguments): class Adder { static int add(int a, int b) { return a + b; } static int add(int a, int b, int c) { return a + b + c; } } Java OOP Method Overloading( Changing the data type of arguments): class Adder { static int add(int a, int b) { return a + b; } static double add(double a, double b) { return a + b; } } </description>
    </item>
    <item>
      <title>Java OOP Method Overriding</title>
      <link>http://localhost:1313/qajune2024/lectures/java-oop-polymorphism/java-oop-method-overriding/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/qajune2024/lectures/java-oop-polymorphism/java-oop-method-overriding/</guid>
      <description>Java OOP Method Overriding: class Animal { void sound() { System.out.println(&amp;#34;Animals make sound&amp;#34;); } } class Dog extends Animal { @Override void sound() { System.out.println(&amp;#34;Dog barks&amp;#34;); } } class Cat extends Animal { @Override void sound() { System.out.println(&amp;#34;Cat meows&amp;#34;); } } public class Main { public static void main(String[] args) { Animal myAnimal; myAnimal = new Dog(); myAnimal.sound(); // Calls Dog&amp;#39;s sound method myAnimal = new Cat(); myAnimal.sound(); // Calls Cat&amp;#39;s sound method } } </description>
    </item>
  </channel>
</rss>
